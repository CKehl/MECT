SET( PYTHON_SUPPORTLIB_INCLUDE_DIRS "" CACHE LIST "Include paths for backend library wrapping headers" )
SET( PYTHON_SUPPORTLIB_LIBRARIES "" CACHE LIST "libraries for backend library wrapping headers" )
SET( SWIG_LA_MODULE_FLAGS "" )

#=== include SWIG package ===#
FIND_PACKAGE(SWIG REQUIRED)
INCLUDE(${SWIG_USE_FILE})
MESSAGE( STATUS "SWIG ${SWIG_VERSION}" )
MESSAGE( STATUS "     Executable: ${SWIG_EXECUTABLE}" )
MESSAGE( STATUS "  SWIG_USE_FILE: ${SWIG_USE_FILE}" )

#=== include PYTHON package ===#
FIND_PACKAGE(PythonLibs 2.7 REQUIRED)
FIND_PACKAGE(PythonInterp 2.7 REQUIRED)
MESSAGE( STATUS "Python ${PYTHON_VERSION_STRING}")
MESSAGE( STATUS "  Executable: ${PYTHON_EXECUTABLE}")
MESSAGE( STATUS "     Include: ${PYTHON_INCLUDE_DIRS}")
MESSAGE( STATUS "   Libraries: ${PYTHON_LIBRARIES}")

#=== include BOOST package ===#
FIND_PACKAGE( Boost REQUIRED)
IF(BOOST_FOOD)
  LIST(APPEND PYTHON_SUPPORTLIB_LIBRARIES ${Boost_LIBRARIES})
  LIST(APPEND PYTHON_SUPPORTLIB_INCLUDE_DIRS ${Boost_INCLUDE_DIR})
  SET(Boost_SUBSYSTEM "")
  LIST(APPEND Boost_SUBSYSTEM boost_system)
  LIST(APPEND Boost_SUBSYSTEM boost_filesystem)
  LIST(APPEND Boost_SUBSYSTEM boost_regex)
  LIST(APPEND Boost_SUBSYSTEM boost_thread)
  MESSAGE( STATUS "Boost C++ ${BOOST_VERSION}" )
  MESSAGE( STATUS "     Include: ${Boost_INCLUDE_DIR}" )
  MESSAGE( STATUS "   Libraries: ${Boost_LIBRARIES}" )
  MESSAGE( STATUS "  subsystems: ${Boost_SUBSYSTEM}" )
  link_directories(${Boost_LIBRARYDIR})
  link_libraries(${Boost_LIBRARIES} ${Boost_SUBSYSTEM})
ENDIF()

### NumPy
if( NOT NUMPY_INCLUDE_DIRS ) 

    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import numpy; print numpy.get_include();"
                      RESULT_VARIABLE NUMPY_RESULT
                      OUTPUT_VARIABLE NUMPY_OUTPUT
                      ERROR_VARIABLE NUMPY_ERRUR
                      )

    if( ${NUMPY_RESULT} )
        message( FATAL "Failed to find numpy includes" )
    else( ${NUMPY_RESULT} )
        string(STRIP ${NUMPY_OUTPUT} NUMPY_INCLUDE_DIRS)
        set( NUMPY_INCLUDE_DIRS ${NUMPY_INCLUDE_DIRS} CACHE PATH "Include path for numpy headers" )
        
        execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import numpy; print numpy.version.full_version;"
                      RESULT_VARIABLE NUMPY_RESULT
                      OUTPUT_VARIABLE NUMPY_OUTPUT
                      ERROR_VARIABLE NUMPY_ERRUR
                      )

        string(STRIP ${NUMPY_OUTPUT} NUMPY_VERSION_STRING)
        set( NUMPY_VERSION_STRING ${NUMPY_VERSION_STRING} CACHE STRING "Numpy version" )
    endif( ${NUMPY_RESULT} )
    
    
endif(NOT NUMPY_INCLUDE_DIRS)
message( STATUS "Numpy ${NUMPY_VERSION_STRING}" )
message( STATUS "  Version: ${NUMPY_VERSION_STRING}" )
message( STATUS "  Include: ${NUMPY_INCLUDE_DIRS}" )

### Microsoft Visual Studio compiler
if( MSVC )
    # for multi-config build MSVC
    foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
        string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
        set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${PROJECT_BINARY_DIR}/bin" )
        set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${PROJECT_BINARY_DIR}/bin" )
        set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${PROJECT_BINARY_DIR}/bin" )
    endforeach()
else()
#    # For the generic no-config case (e.g. with mingw)
#    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin" )
#    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib" )
#    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib" )
endif()
####==== END GENERAL INCLUDE PREFIX ====####
INCLUDE_DIRECTORIES(
	${PYTHON_INCLUDE_PATH}
	${NUMPY_INCLUDE_DIRS}
	${PYTHON_SUPPORTLIB_INCLUDE_DIRS}
	${CMAKE_CURRENT_SOURCE_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}/../src
	${CMAKE_CURRENT_SOURCE_DIR}/../../common/src)

SET(CMAKE_SWIG_FLAGS "")
SET(PYCXX_SOURCE_FOLDER "../src/")
SET(outdir "Utilities/io/Wrapping")
SET(SWIG_LA_MODULE_FLAGS "${SWIG_LA_MODULE_FLAGS} -DWRAPPING")

SET_SOURCE_FILES_PROPERTIES(INI.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(INI.i PROPERTIES SWIG_FLAGS "-ignoremissing;-w509")
if(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(INI.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(INI.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
else(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(INI.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(INI.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
endif(CMAKE_BUILD_TYPE MATCHES "Release")

SET_SOURCE_FILES_PROPERTIES(MHD.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(MHD.i PROPERTIES SWIG_FLAGS "-ignoremissing;-w509")
if(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(MHD.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(MHD.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
else(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(MHD.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(MHD.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
endif(CMAKE_BUILD_TYPE MATCHES "Release")

SET_SOURCE_FILES_PROPERTIES(volumeSegmentationDAT.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(volumeSegmentationDAT.i PROPERTIES SWIG_FLAGS "-ignoremissing;-w509")
if(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(volumeSegmentationDAT.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(volumeSegmentationDAT.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
else(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(volumeSegmentationDAT.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(volumeSegmentationDAT.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
endif(CMAKE_BUILD_TYPE MATCHES "Release")

SET_SOURCE_FILES_PROPERTIES(FAMS_ASCII.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(FAMS_ASCII.i PROPERTIES SWIG_FLAGS "-ignoremissing;-w509")
if(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(FAMS_ASCII.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(FAMS_ASCII.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
else(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(FAMS_ASCII.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(FAMS_ASCII.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
endif(CMAKE_BUILD_TYPE MATCHES "Release")

SET_SOURCE_FILES_PROPERTIES(volumeFileInterface.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(volumeFileInterface.i PROPERTIES SWIG_FLAGS "-ignoremissing;-w509")
if(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(volumeFileInterface.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(volumeFileInterface.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS} ${SWIG_LA_MODULE_FLAGS}")
else(CMAKE_BUILD_TYPE MATCHES "Release")
  SET_SOURCE_FILES_PROPERTIES(volumeFileInterface.i PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
  SET_SOURCE_FILES_PROPERTIES(volumeFileInterface.i PROPERTIES CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} ${SWIG_LA_MODULE_FLAGS}")
endif(CMAKE_BUILD_TYPE MATCHES "Release")

#SWIG_ADD_MODULE(volumeFileInterface python INI.i MHD.i ${PYCXX_SOURCE_FOLDER}INI.cpp ${PYCXX_SOURCE_FOLDER}MHD.cpp ${PYCXX_SOURCE_FOLDER}volumeSegmentationDAT.cpp)
#SWIG_ADD_MODULE(volumeFileInterface python volumeFileInterface.i INI.i MHD.i)
SWIG_ADD_MODULE(ini python INI.i ${PYCXX_SOURCE_FOLDER}INI.cpp)
SWIG_ADD_MODULE(mhd python MHD.i ${PYCXX_SOURCE_FOLDER}MHD.cpp)
SWIG_ADD_MODULE(fams_ascii python FAMS_ASCII.i ${PYCXX_SOURCE_FOLDER}FAMS_ASCII.cpp)
SWIG_ADD_MODULE(volumeSegmentationDat python volumeSegmentationDAT.i ${PYCXX_SOURCE_FOLDER}volumeSegmentationDAT.cpp)
SWIG_ADD_MODULE(volumeFileInterface python volumeFileInterface.i)
SWIG_LINK_LIBRARIES(volumeFileInterface ${PYTHON_SUPPORTLIB_LIBRARIES} ${PYTHON_LIBRARIES})

if(UNIX)
  INSTALL(FILES
    ${CMAKE_BINARY_DIR}/${outdir}/_mhd.so
    ${CMAKE_BINARY_DIR}/${outdir}/mhd.py
    ${CMAKE_BINARY_DIR}/${outdir}/_fams_ascii.so
    ${CMAKE_BINARY_DIR}/${outdir}/fams_ascii.py
    ${CMAKE_BINARY_DIR}/${outdir}/_volumeFileInterface.so
    ${CMAKE_BINARY_DIR}/${outdir}/volumeFileInterface.py
    DESTINATION lib/python2.7/site-packages)
else()
  INSTALL(FILES
    ${CMAKE_BINARY_DIR}/${outdir}/mhd.pyd
    ${CMAKE_BINARY_DIR}/${outdir}/mhd.py
    ${CMAKE_BINARY_DIR}/${outdir}/fams_ascii.pyd
    ${CMAKE_BINARY_DIR}/${outdir}/fams_ascii.py
    ${CMAKE_BINARY_DIR}/${outdir}/volumeFileInterface.pyd
    ${CMAKE_BINARY_DIR}/${outdir}/volumeFileInterface.py
    DESTINATION lib/python2.7/site-packages)
endif()
